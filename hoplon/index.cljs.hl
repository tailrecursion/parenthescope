(page "index.html"
  (:refer-hoplon :exclude [init])
  (:refer-clojure :exclude [symbol keyword list])
  (:require
    [clojure.string :as string]
    [tailrecursion.castra :refer [mkremote]]))

(defc   state       ::none)
(defc   error       ::none)
(defc   loading     [])

(defc asdf [{:item "one"} {:item "two"}])

(def    psym        #(str "tailrecursion.parenthescope.core" "/" %))
(def    get-state   (mkremote (psym "get-state") state error loading))

(defn node->span [n]
  (let [classes (->> n :style
                  (concat (when (:point n) [:point]))
                  (map name)
                  (string/join " "))]
    (span :class classes (:text n))))

(defn screen [nodes]
  (when (vector? nodes)
    (let [body (.. (js/jQuery "#container") empty (get 0))]
      (doseq [n nodes] (body (if (map? n) (node->span n) n))))))

(defn dummy2 [x] (inc x))

(defn init []
  (cell= (when-let [e (:trace error)] (print e)))
  (cell= (screen (:point state)))
  (on! (.-body js/document)
       :keypress
       #(get-state (.fromCharCode js/String (.-which %))))
  (get-state nil))

(init)

(defc asdf [{:a 1} {:a 2}])

(html
  (head
    (link :rel "stylesheet" :type "text/css" :href "main.css"))
  (body
    (div
      (pre :id "container"))))
